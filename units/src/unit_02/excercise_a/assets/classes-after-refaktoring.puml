@startuml

abstract class Blume

note "Die toString Methoden erlauben,\ndie Stringausgabe anzupassen. \n\nDamit man z. B. `Rose` ausgeben kann, \nstatt `ROSE`." as TheToStringOfEnum
Sorte .. TheToStringOfEnum
Farbe .. TheToStringOfEnum

note left of Blume: Warum die Enum-Typen sowie die Instanzfelder \nprotected sind?\n\tWeil die Konstruktoren der Unterklassen\n\tdiese ben√∂tigen.
note top of Sorte: Jeder Enum-Type hat eine Methode `values()`, \ndie seine Werte in einem Array ausgibt.
Blume <|-- Rose
Blume <|-- Tulpe
Blume <|-- Nelke

class Blume {
// Blumensorte, explizit als Typ
protected enum Sorte

// Farbe, explizit als Typ
protected enum Farbe

// Instanzfelder
Sorte sorte
Farbe farbe
public String toString()
public void farbe()
public void identifizieren()
}


enum Sorte {
ROSE
TULPE
NELKE
public String toString()
}

enum Farbe {
ROT
GELB
BLAU
public String toString()
}

class Rose {
@Override public void identifizieren()
public void wurzeln()
}

class Tulpe {
@Override public void identifizieren()
public void zwiebeln()
}

class Nelke {
@Override public void identifizieren()
public void stauden()
}

center footer excercise_a von unit_02 nach dem Refaktoring: `Konstanten durch Enum-Werte ersetzen`.
@enduml